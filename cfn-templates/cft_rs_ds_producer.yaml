---

AWSTemplateFormatVersion: '2010-09-09'
Description: ''
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: 'VPC Parameters'
        Parameters:
          - ClassB
      - Label:
          default: 'Redshift Parameters'
        Parameters:
          - RedshiftNodeType
          - RedshiftNumberOfNodes
    ParameterLabels:
      ClassB:
        default: Choose Second Octet for Class B VPC Address (10.xxx.0.0/16)
      RedshiftNodeType:
        default: Redshift Cluster NodeType
      RedshiftNumberOfNodes:
        default: Choose the number of nodes for the Redshift Cluster

Parameters:
  ClassB:
    Description: 'Class B of VPC (10.XXX.0.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Class B octet in the range of [0-255]'
    MinValue: 0
    MaxValue: 255
  RedshiftNodeType:
    Description: Node type for the Redshift Cluster
    Type: String
    Default: dc2.large
    AllowedValues:
      - dc2.large
      - ra3.xlplus
      - ra3.4xlarge
      - ra3.16xlarge
  RedshiftNumberOfNodes:
    Description: Number of Nodes or the Redshift Cluster
    Type: Number
    Default: 2
    ConstraintDescription: 'Number of Nodes in the range of [0-100]'
    MinValue: 0
    MaxValue: 100

Mappings:
  ClusterConfigurations:
    redshift:
      dbName: redshiftdb

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '10.${ClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-IGW'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.0.0/24'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'public-subnet-1'
  SubnetPrivate1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.10.0/24'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'private-subnet-1'
  SubnetPrivate2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.11.0/24'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'private-subnet-2'
  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'public-route-table-1'
  RouteTablePrivate1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'private-route-table-1'
  RouteTablePrivate2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'private-route-table-2'
  RouteTableAssociationPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublic
      RouteTableId: !Ref RouteTablePublic
  RouteTableAssociationPrivate1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivate1
      RouteTableId: !Ref RouteTablePrivate1
  RouteTableAssociationPrivate2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivate2
      RouteTableId: !Ref RouteTablePrivate2
  RouteTablePublicInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  NatGatewayEIP1:
    Type: 'AWS::EC2::EIP'
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId: !Ref SubnetPublic
  RouteTablePrivateInternetRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePrivate1
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway1
  NatGatewayEIP2:
    Type: 'AWS::EC2::EIP'
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
  NatGateway2:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId: !Ref SubnetPublic
  RouteTablePrivateInternetRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePrivate2
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway2
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Public NACL'
  NetworkAclPrivate1:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Private NACL 1'
  NetworkAclPrivate2:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Private NACL 2'
  SubnetNetworkAclAssociationPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPublic
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationPrivate1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivate1
      NetworkAclId: !Ref NetworkAclPrivate1
  SubnetNetworkAclAssociationPrivate2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivate2
      NetworkAclId: !Ref NetworkAclPrivate2
  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInPrivateAllowVPC1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate1
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateAllowVP1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate1
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInPrivateAllowVPC2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate2
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateAllowVP2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate2
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  S3VPCEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: '*'
            Effect: Allow
            Resource: '*'
            Principal: '*'
      RouteTableIds:
        - !Ref RouteTablePrivate1
        - !Ref RouteTablePrivate2
      ServiceName: !Join 
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .s3
      VpcId: !Ref VPC
  RedshiftIAMRole: 
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'redshift.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess'
  RedShiftSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for Redshift cluster'
      VpcId: !Ref VPC
  RedshiftSGGlue:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref RedShiftSG
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref RedShiftSG
  RedshiftSubnetGroup:
    Type: 'AWS::Redshift::ClusterSubnetGroup'
    Properties:
      Description: 'Redshift cluster subnet group'
      SubnetIds:
        - !Ref SubnetPrivate1
  RedshiftCreds:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: !Sub Redshift cluster master user credentials for ${AWS::StackName}
      GenerateSecretString:
        SecretStringTemplate: '{"username": "redshiftmasteruser"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludePunctuation: true
  RedshiftCluster:
    Type: 'AWS::Redshift::Cluster'
    Properties:
      ClusterIdentifier: !Sub ${AWS::StackName}-Redshift-Cluster
      DBName: !FindInMap [ ClusterConfigurations, redshift, dbName ]
      MasterUsername: !Join [ '', [ '{{resolve:secretsmanager:', !Ref RedshiftCreds, ':SecretString:username}}' ]]
      MasterUserPassword: !Join [ '', [ '{{resolve:secretsmanager:', !Ref RedshiftCreds, ':SecretString:password}}' ]]
      NodeType: !Ref RedshiftNodeType
      ClusterType: multi-node
      NumberOfNodes: !Ref RedshiftNumberOfNodes
      PubliclyAccessible: false
      VpcSecurityGroupIds:
        - !Ref RedShiftSG
      ClusterSubnetGroupName: !Ref RedshiftSubnetGroup
      IamRoles:
        - !GetAtt RedshiftIAMRole.Arn
  RedshiftDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private

Outputs:
  VPCandCIDR:
    Description: 'VPC ID and CIDR block'
    Value: !Join [' - ', [!Ref VPC, !GetAtt VPC.CidrBlock]]
  PublicSubnets:
    Description: 'Public subnet(s)'
    Value: !Ref SubnetPublic
  PrivateSubnets:
    Description: 'Private subnet(s)'
    Value: !Join [', ', [!Ref SubnetPrivate1, !Ref SubnetPrivate2]]
  RedshiftClusterEndpointWithPort:
    Description: 'Redshift cluster endpoint address with port number'
    Value: !Join [ ":", [ !GetAtt RedshiftCluster.Endpoint.Address, !GetAtt RedshiftCluster.Endpoint.Port ]]
  RedshiftClusterDBName:
    Description: 'Redshift cluster database name'
    Value: !FindInMap [ ClusterConfigurations, redshift, dbName ]
  RedshiftClusterSecret:
    Description: 'Redshift cluster credentials secret ARN'
    Value: !Ref RedshiftCreds
  RedshiftCopyIAMRole:
    Description: 'IAM Role created specifically for the Redshift Cluster'
    Value: !Ref RedshiftIAMRole
  RedshiftS3Bucket:
    Description: 'S3 bucket to hold test data to be copied to Redshift producer cluster'
    Value: !Ref RedshiftDataBucket